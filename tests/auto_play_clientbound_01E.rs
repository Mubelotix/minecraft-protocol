
//! This test was automatically generated. Please run the proxy example to regenerate it.
//! 
//! ```
//! cargo run --example proxy
//! ```

use minecraft_protocol::{MinecraftPacketPart, packets::play_clientbound::ClientboundPacket};

#[test]
fn auto_play_clientbound_1e() {
    let input = &[30, 64, 134, 61, 150, 110, 147, 82, 116, 64, 80, 67, 235, 133, 32, 0, 0, 64, 130, 20, 83, 49, 9, 36, 154, 64, 128, 0, 0, 76, 0, 254, 255, 0, 0, 253, 0, 255, 254, 2, 0, 255, 253, 255, 1, 0, 254, 0, 2, 255, 2, 2, 254, 0, 1, 0, 255, 4, 0, 1, 3, 255, 2, 255, 255, 0, 253, 255, 254, 1, 255, 0, 254, 254, 0, 1, 0, 252, 255, 254, 0, 1, 0, 254, 1, 254, 2, 2, 254, 1, 1, 0, 3, 2, 1, 253, 3, 0, 255, 3, 0, 0, 0, 255, 1, 255, 255, 254, 4, 0, 0, 254, 255, 1, 3, 0, 3, 0, 254, 1, 2, 255, 0, 4, 0, 2, 1, 0, 253, 254, 255, 0, 254, 255, 255, 0, 255, 0, 1, 254, 255, 2, 255, 255, 1, 254, 0, 3, 0, 1, 2, 255, 3, 0, 255, 2, 255, 254, 2, 253, 255, 3, 2, 255, 1, 254, 255, 254, 1, 254, 1, 255, 255, 1, 1, 255, 254, 0, 254, 254, 1, 255, 1, 253, 0, 251, 255, 254, 254, 255, 255, 253, 2, 0, 253, 254, 254, 255, 1, 255, 3, 255, 255, 2, 4, 0, 255, 0, 0, 254, 255, 254, 1, 3, 0, 254, 253, 255, 255, 1, 254, 254, 253, 255, 0, 1, 255, 255, 255, 255, 255, 255, 254, 255, 1, 255, 2, 254, 0, 251, 0, 255, 255, 3, 255, 3, 2, 0, 254, 254, 255, 2, 0, 254, 2, 2, 0, 0, 187, 138, 134, 144, 62, 242, 213, 225, 63, 23, 36, 190];
    let packet = ClientboundPacket::deserialize_uncompressed_minecraft_packet(input).unwrap();

    match packet.serialize_minecraft_packet() {
        Ok(packet) => {
            assert_eq!(packet, input)
        }
        Err(e) => panic!("Failed to serialize packet: {:?}", e),
    };
}
