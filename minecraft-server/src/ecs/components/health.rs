use minecraft_ecs_macros::is_component;

use crate::prelude::*;

#[is_component]
pub struct HealthComponent {
    pub health: f32,
    pub max_health: f32,
}

/*
#[derive(Clone, Component)]
pub struct Boat {
    pub health: f32,
}


#[derive(Clone, Component)]
pub struct ChestBoat {
    property: Property,
    boat: Boat, // Component to detect
}

impl Entities {
    pub async fn spawn_chest_boat(&self, id: Eid, chest_boat: ChestBoat) -> Option<()> {
        let mut chest_boats = self.chest_boat_components.write().await;
        chest_boats.insert(id, chest_boat);
        self.insert_component(id, Component::Boat).await; // Generated by extend
        self.attach_component(id, Component::ChestBoat).await; // Generated by extend
        Some(())
    }
}*/

impl HealthComponent {
    /// Returns true if the entity is dead.s
    pub async fn is_dead(&self) -> bool {
        self.health <= 0.0
    }

    pub async fn get_health(&self) -> f32{
        self.health
    }

    /// Heals the entity by the given amount.
    pub async fn heal(&mut self, amount: f32) {
        self.health = (self.health + amount).min(self.max_health);
    }

    /// Fully heals the entity.
    pub async fn full_heal(&mut self) {
        self.health = self.max_health;
    }

    /// Damages the entity by the given amount.
    pub async fn damage(&mut self, amount: f32) -> Option<()> {
        self.health -= amount;
        self.health = self.health.max(0.0);
        Some(())
    }
}


